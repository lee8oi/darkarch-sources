{
   "app_list": {
      "app_launch_count": 0,
      "last_app_launch_ping": "13065235200000000",
      "last_launch_ping": "13065235200000000",
      "launch_count": 0
   },
   "browser": {
      "enabled_labs_experiments": [  ],
      "last_redirect_origin": ""
   },
   "hardware_acceleration_mode_previous": true,
   "local_state": {
      "multiple_profile_prefs_version": 7
   },
   "network_time": {
      "network_time_mapping": {
         "local": 1420831023404.397,
         "network": 1420831025130.38
      }
   },
   "ntp": {
      "promo_resource_cache_update": "1420831023.181636"
   },
   "policy": {
      "last_statistics_update": "13065304617761039"
   },
   "profile": {
      "info_cache": {
         "Default": {
            "active_time": 1420831030.726789,
            "avatar_icon": "chrome://theme/IDR_PROFILE_AVATAR_26",
            "background_apps": false,
            "is_ephemeral": false,
            "is_omitted_from_profile_list": false,
            "is_using_default_avatar": true,
            "is_using_default_name": true,
            "managed_user_id": "",
            "name": "First user",
            "user_name": ""
         }
      },
      "last_active_profiles": [ "Default" ],
      "last_used": "Default"
   },
   "show-first-run-bubble-option": 2,
   "shutdown": {
      "num_processes": 0,
      "num_processes_slow": 0,
      "type": 0
   },
   "uninstall_metrics": {
      "installation_date2": "1420831017",
      "launch_count": "1"
   },
   "user_experience_metrics": {
      "low_entropy_source2": 2885,
      "session_id": 0,
      "stability": {
         "breakpad_registration_fail": 1,
         "child_process_crash_count": 0,
         "crash_count": 0,
         "debugger_not_present": 1,
         "execution_phase": 500,
         "exited_cleanly": false,
         "extension_renderer_crash_count": 0,
         "incomplete_session_end_count": 0,
         "launch_count": 1,
         "launch_time_sec": "1420831017",
         "page_load_count": 0,
         "plugin_stats2": [  ],
         "renderer_crash_count": 0,
         "renderer_hang_count": 0,
         "session_end_completed": true,
         "stats_buildtime": "1417790048",
         "stats_version": "39.0.2171.95-64"
      }
   },
   "variations_last_fetch_time": "13065304623407300",
   "variations_seed": "",
   "variations_seed_date": "13065304625000000",
   "variations_seed_signature": "MEUCIQCQheD53utRJypYlUeYdU5hutHgOKicgphVa5jsnCmzEgIgXQAQBNHqvkw72gsXKilxYoR+nFWctf1sS7LEFzwVZMc=",
   "was": {
      "restarted": false
   }
}
